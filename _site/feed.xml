<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Krzysztof Maicher</title>
    <description></description>
    <link>http://maicher.github.io/</link>
    <atom:link href="http://maicher.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 03 Aug 2016 20:27:46 +0200</pubDate>
    <lastBuildDate>Thu, 03 Aug 2016 20:27:46 +0200</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>My approach to a database design process for Rails application</title>
        <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Some time ago, I’ve created a Ruby on Rails application, which purpose was to present data (electric and gas meter readings) by charts and tables.
The application was acquiring that data from FTP.&lt;/p&gt;

&lt;p&gt;You can read more about that app &lt;a href=&quot;/freelance-ruby-or-rails-application-development&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article I’d like to describe my thought process behind designing a peace of database for that application.
The part of database, that I want to show is simple, only 3 tables.
My goal is to point out some implementation details, thanks to which I’m 100% sure to say, that &lt;strong&gt;application, based on that database design will never loose it’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_integrity&quot;&gt;data integrity&lt;/a&gt;&lt;/strong&gt;.
I invite you to read!&lt;/p&gt;

&lt;h3 id=&quot;analyze-data&quot;&gt;Analyze data&lt;/h3&gt;

&lt;p&gt;Data, that were stored on FTP by meters, had following characteristics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;there are around 40 meters, each identified by its unique 18-digit number&lt;/li&gt;
  &lt;li&gt;each meter puts its measurements on ftp server as a csv file&lt;/li&gt;
  &lt;li&gt;each file has about 50 lines&lt;/li&gt;
  &lt;li&gt;one line represent one reading (two values, timestamp and a meter number)&lt;/li&gt;
  &lt;li&gt;around 40 new files a day (can be more in future)&lt;/li&gt;
  &lt;li&gt;that gives around 2k new readings every day&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Over a year, the data would grow to &lt;em&gt;2k x 365&lt;/em&gt;, that is around &lt;em&gt;0.7M&lt;/em&gt; records each year.
That is not that much and a properly designed &lt;em&gt;PostgreSQL&lt;/em&gt; database should handle that amount of data without any performance problems for years.
I wanted to store that data in a relational database, that would allow me to easily access it in other part of application, to present it as charts or tables.&lt;/p&gt;

&lt;h3 id=&quot;database-design-upfront&quot;&gt;Database design upfront&lt;/h3&gt;

&lt;p&gt;I decided, that the application will interact with database by ActiveRecord. I like ActiveRecord, because of its ease of use.
However, when it comes to creating new ActiveRecord models, my approach may be different from other Rails developers.
I’ve seen, that sometimes Rails developers jump into generating ActiveRecord models (using &lt;code class=&quot;highlighter-rouge&quot;&gt;rails generate model ...&lt;/code&gt;) without really paying attention to how the resulting database will look like.&lt;/p&gt;

&lt;p&gt;I like to come up with a &lt;strong&gt;database design upfront&lt;/strong&gt; (in mind, on paper or in some tool) and after that, I start creating ActiveRecord models to satisfy the database design.
In other words I design database at first, and then build an &lt;strong&gt;ActiveRecord models layer on top of it&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this case I came up with following database design.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gt_readings_db.png&quot; alt=&quot;Database schema&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That design is not complex, so I made it in my head before start creating models.
However, if more tables with more sophisticated relations would be necessary, I could draw a design on paper or in some tool (eg. SQL Power Architect) before generating models and migrations.&lt;/p&gt;

&lt;h3 id=&quot;ftpfiles-model&quot;&gt;FtpFiles model&lt;/h3&gt;

&lt;p&gt;At first I came up with &lt;em&gt;ftp_files&lt;/em&gt; table. My idea of &lt;em&gt;ftp_files&lt;/em&gt; table was to store a list of file names, that have already been parsed. Just a list of file names.
It would be pointless to allow keeping there empty names, that’s why I’ve set a &lt;a href=&quot;https://www.postgresql.org/docs/9.3/static/ddl-constraints.html#AEN2486&quot;&gt;not-null constraint&lt;/a&gt;.
To ensure &lt;em&gt;name&lt;/em&gt; uniqueness I could set a &lt;a href=&quot;https://www.postgresql.org/docs/9.4/static/indexes-unique.html&quot;&gt;unique index&lt;/a&gt; or &lt;a href=&quot;https://www.postgresql.org/docs/9.3/static/ddl-constraints.html#DDL-CONSTRAINTS-UNIQUE-CONSTRAINTS&quot;&gt;unique constraint&lt;/a&gt;.
Both ensures uniqueness.
Unique index would also improve performance on querying that table by that column, but lower insertions.
At this moment, I did not know, whether my application needs an index on that column.
I was sure that I need the uniqueness and was not sure if I need index.
From my experience, in most cases, when uniqueness is needed, a index is needed as well.
So I decided to implemented a unique index there.&lt;/p&gt;

&lt;p&gt;Summarizing &lt;em&gt;ftp_files&lt;/em&gt; has a name column, that has to be unique and cannot be null.&lt;/p&gt;

&lt;p&gt;Having that in head, I ran &lt;code class=&quot;highlighter-rouge&quot;&gt;rails g model FtpFile name:string&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, how should the generated migration be adjusted?&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateFtpFiles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create_table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ftp_files&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;nil: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:created_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:datetime&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;add_index&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ftp_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;unique: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;meter-model&quot;&gt;Meter model&lt;/h3&gt;

&lt;p&gt;A meter is identified by it’s &lt;em&gt;number&lt;/em&gt;.
There has to be only one meter with given number, that’s why I decided to apply a not-null constraints and unique index on &lt;em&gt;number&lt;/em&gt; column as well.
Having a unique index on that column gives the assurance, that in application, every time a meter will be searched by number, there will be zero or exactly one meter found.&lt;/p&gt;

&lt;p&gt;Migrations:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateMeters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create_table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:meters&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:meter_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;timestamps&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;add_index&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:meters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;unique: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;reading-model&quot;&gt;Reading model&lt;/h3&gt;

&lt;p&gt;Reading belongs to meter. Meter has many readings.&lt;/p&gt;

&lt;p&gt;One reading consists of 4 values:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;datetime, when it was measured,&lt;/li&gt;
  &lt;li&gt;18-digit meter number,&lt;/li&gt;
  &lt;li&gt;two reading values, each representing different tariff. First is always present, second - only sometimes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In database, I represented that as following columns: &lt;em&gt;timestamp&lt;/em&gt;, &lt;em&gt;meter_id&lt;/em&gt;, &lt;em&gt;value1&lt;/em&gt;, &lt;em&gt;value2&lt;/em&gt;. You can go back to the schema above and check it out visually.&lt;/p&gt;

&lt;p&gt;It is highly undesirable to double readings in database, because charts created from them would present incorrect values.
How to prevent from saving double readings?
In &lt;em&gt;PostgreSQL&lt;/em&gt; a &lt;strong&gt;unique constraints&lt;/strong&gt; or &lt;strong&gt;unique index&lt;/strong&gt; can be applied to a &lt;strong&gt;group of columns&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There is a complete certainty, that when application for any reason (bug, my or some other developers mistake, or even a client’s software problem) will try to insert a doubled reading to database, an exception will be raised (from database level), which is very desirable.
I don’t want to see double readings in that database. Unique indexes guarantees it and I can rely on that.&lt;/p&gt;

&lt;p&gt;Migration:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateReadings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create_table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:readings&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:value1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:value2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:meter_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;add_foreign_key&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:readings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:meters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;on_delete: :restrict&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h4 id=&quot;foreign-keys&quot;&gt;Foreign keys&lt;/h4&gt;

&lt;p&gt;What is seen in 10’th line in above migration is a &lt;a href=&quot;https://www.postgresql.org/docs/8.1/static/tutorial-fk.html&quot;&gt;foreign key&lt;/a&gt;.
&lt;em&gt;meters&lt;/em&gt; and &lt;em&gt;readings&lt;/em&gt; tables are related.
A foreign key is a mechanism, that keeps so called &lt;em&gt;referential integrity&lt;/em&gt; of that two tables.
It prevents inserting reading related to non-existent meter and prevents from deleting meter, that has related readings.
In other words, a &lt;strong&gt;foreign key prevents the occurrence of &lt;a href=&quot;http://www.dhdursoassociates.com/database-glossary-3.html#orphan&quot;&gt;orphaned records&lt;/a&gt;&lt;/strong&gt; in readings table.&lt;/p&gt;

&lt;h3 id=&quot;activerecord-validations&quot;&gt;ActiveRecord validations&lt;/h3&gt;

&lt;p&gt;Aren’t what ActiveRecord validations are made for? All above mechanisms could be implemented in ActiveRecord models though.
I like to use ActiveRecord validations, since they are helpful in generating nice error messages, but there are so many ways of going around them, that they cannot be rely on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ActiveRecord validations doesn’t guarantee application’s data integrity&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Because they can be omitted by using following methods:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#save(validate: false)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.update_attribute&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.delete&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.delete_all&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.update_all&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since above methods are available in whole application, it’s crazy to assume, that nobody ever will use them!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Because developer can write to database tables by using raw SQL queries, or even log into psql console to run some updates or inserts.&lt;/li&gt;
  &lt;li&gt;Because they always takes few steps to perform, so they are exposed to race conditions in concurrently running code (read &lt;em&gt;Concurrency and integrity&lt;/em&gt; section in &lt;a href=&quot;http://apidock.com/rails/v4.2.1/ActiveRecord/Validations/ClassMethods/validates_uniqueness_of&quot;&gt;documentation&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;data-integrity&quot;&gt;Data integrity&lt;/h3&gt;

&lt;p&gt;Summarizing, if you want to prevent an application from loosing it’s data integrity, you have to keep &lt;strong&gt;security on a database layer&lt;/strong&gt;. I other words, you have to use database mechanisms to prevent loosing data integrity.
ActiveRecord validations can not be rely on.
Using ActiveRecord models speeds up the development process, but using them without a solidly designed database can lead to frustrations and to lots of maintenance work, when data will start loosing its integrity in production.&lt;/p&gt;

&lt;p&gt;When you aim for a solid database design, learn about foreign keys and start using them.
Start using uniqueness validations not only in ActiveRecord models, but at a database layer as well (including unique indexes on groups or inside json fields).
Use not-null constraints if column can’t be blank and specify a default value.&lt;/p&gt;

&lt;p&gt;In my case, in application, that I described here, I can be sure (unless nobody will modify the database schema), that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Readings and meters will not be doubled.&lt;/li&gt;
  &lt;li&gt;There will be no readings without a value or timestamp.&lt;/li&gt;
  &lt;li&gt;There will be no orphaned records on meters-readings relation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Furthermore, application can download the data concurrently and when race conditions will occur, they can be handle, because database will inform about that by raising errors.&lt;/p&gt;

&lt;p&gt;Having that, the client can rely on the data in that database. Meter readings can be kept there for years, without fear of loosing their consistency.&lt;/p&gt;
</description>
        <pubDate>Wed, 03 Aug 2016 22:00:00 +0200</pubDate>
        <link>http://maicher.github.io/my-approach-to-a-database-design-process-for-rails-application.html</link>
        <guid isPermaLink="true">http://maicher.github.io/my-approach-to-a-database-design-process-for-rails-application.html</guid>
        
        <category>Ruby</category>
        
        <category>Rails</category>
        
        <category>database</category>
        
        <category>PostgreSQL</category>
        
        
      </item>
    
      <item>
        <title>Freelance Ruby on Rails application development</title>
        <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;I took a few days off from my regular work to create an application for an employment agency located in Holland. I would like to present here, how I’ve approached this task. I invite you to read!&lt;/p&gt;

&lt;h3 id=&quot;background&quot;&gt;Background&lt;/h3&gt;

&lt;p&gt;The client was an employment agency, that organizes work for people in agricultural sector. They also provide accommodation for their employees during the time of their employment. The client wanted to be able to monitor gas and electricity consumption in those places.
They already had meters installed (a kind of &lt;a href=&quot;https://en.wikipedia.org/wiki/Smart_meter&quot;&gt;Smart Meters&lt;/a&gt;) at those places. These meter were performing &lt;strong&gt;readings&lt;/strong&gt; every few minutes and collecting them as &lt;strong&gt;files on FTP server&lt;/strong&gt;.
It was hard for the client to view and manage these reading, so the client was looking for a solution, that would view all these data in a more friendly form, like &lt;strong&gt;tables and charts&lt;/strong&gt;.
They also wanted to group these data by addresses, perform some comparisons, see daily and hourly usage in selected date ranges and have costs per person automatically calculated.
They contacted me and asked to propose a solution.&lt;/p&gt;

&lt;h3 id=&quot;the-solution&quot;&gt;The solution&lt;/h3&gt;

&lt;p&gt;Currently, I specialize in building web application using Ruby on Rails and it seemed like a &lt;strong&gt;Ruby on Rails web application&lt;/strong&gt; could satisfy client’s requirements.
I proposed following solution, consisting of three parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An admin panel with classic CRUD for managing addresses and settings (Ruby on Rails, PostgreSQL).&lt;/li&gt;
  &lt;li&gt;A script, acquiring data from ftp server (Ruby, CRON).&lt;/li&gt;
  &lt;li&gt;Minimalistic frontend with a nice tables and charts (HTML/CSS, Bootstrap3, JavaScript with some AngularJS inserts).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I contacted the client to discuss each of above part once again. I wanted to check, if I understood their requirements.
We agreed on &lt;a href=&quot;http://c2.com/cgi/wiki?TimeAndMaterialContract&quot;&gt;time &amp;amp; material&lt;/a&gt; &lt;a href=&quot;https://blog.lelonek.me/how-to-charge-our-clients-ade8b6a53102#.tr023ghm4&quot;&gt;payment model&lt;/a&gt; and I presented hourly estimates for each of above part, to get them a sens of costs.
I declared to contact them at the end of each part to show the progress and to discuss some potential changes or misunderstandings.&lt;/p&gt;

&lt;h3 id=&quot;work-process&quot;&gt;Work process&lt;/h3&gt;

&lt;p&gt;For my own convenience, I decided to keep the code quality high.
I mean to keep the code decoupled, write tests, pay attention to data integrity (validations, foreign keys, unique indexes), handle edge cases, follow the unofficial Ruby style guide and use Rubocop to check it.&lt;/p&gt;

&lt;p&gt;Keeping the code quality high and a &lt;a href=&quot;http://thecleancoder.blogspot.com/2010/09/hacker-novice-artist-and-craftsman.html&quot;&gt;craftsmanship approach&lt;/a&gt; helped me go through development process efficiently.&lt;/p&gt;

&lt;h3 id=&quot;results&quot;&gt;Results&lt;/h3&gt;

&lt;p&gt;In future posts I will try to show some code snippets.&lt;/p&gt;

&lt;p&gt;Here are some screens of the finished app.&lt;/p&gt;

&lt;div style=&quot;width:100%;text-align:center;margin-bottom:40px&quot;&gt;
    &lt;a target=&quot;_blank&quot; href=&quot;/assets/gt_dashboard.jpg&quot;&gt;&lt;img style=&quot;max-width:350px&quot; src=&quot;/assets/min/gt_dashboard.jpg&quot; alt=&quot;Bar charts showing gas and electricity cost for each address in selected date range&quot; /&gt;&lt;/a&gt;
    &lt;br /&gt;
    &lt;caption align=&quot;bottom&quot;&gt;Bar charts showing gas and electricity cost for each address in selected date range&lt;/caption&gt;
&lt;/div&gt;

&lt;div style=&quot;width:100%;text-align:center;margin-bottom:40px&quot;&gt;
    &lt;a target=&quot;_blank&quot; href=&quot;/assets/gt_charts_days.jpg&quot;&gt;&lt;img style=&quot;max-width:350px&quot; src=&quot;/assets/min/gt_charts_days.jpg&quot; alt=&quot;Line charts showing daily electricity consumption for selected addresses and date range&quot; /&gt;&lt;/a&gt;
    &lt;br /&gt;
    &lt;caption align=&quot;bottom&quot;&gt;Line charts showing daily electricity consumption for selected addresses and date range&lt;/caption&gt;
&lt;/div&gt;

&lt;div style=&quot;width:100%;text-align:center;margin-bottom:40px&quot;&gt;
    &lt;a target=&quot;_blank&quot; href=&quot;/assets/gt_charts2_hours.jpg&quot;&gt;&lt;img style=&quot;max-width:350px&quot; src=&quot;/assets/min/gt_charts2_hours.jpg&quot; alt=&quot;Line charts showing hourly electricity consumption for selected addresses and one day&quot; /&gt;&lt;/a&gt;
    &lt;br /&gt;
    &lt;caption align=&quot;bottom&quot;&gt;Line charts showing hourly electricity consumption for selected addresses and one day&lt;/caption&gt;
&lt;/div&gt;

&lt;div style=&quot;width:100%;text-align:center;margin-bottom:40px&quot;&gt;
    &lt;a target=&quot;_blank&quot; href=&quot;/assets/gt_meters_index.jpg&quot;&gt;&lt;img style=&quot;max-width:350px&quot; src=&quot;/assets/min/gt_meters_index.jpg&quot; alt=&quot;Meters table&quot; /&gt;&lt;/a&gt;
    &lt;br /&gt;
    &lt;caption align=&quot;bottom&quot;&gt;Meters table&lt;/caption&gt;
&lt;/div&gt;

&lt;div style=&quot;width:100%;text-align:center;margin-bottom:40px&quot;&gt;
    &lt;a target=&quot;_blank&quot; href=&quot;/assets/gt_address_index.jpg&quot;&gt;&lt;img style=&quot;max-width:350px&quot; src=&quot;/assets/min/gt_address_index.jpg&quot; alt=&quot;Addresses table&quot; /&gt;&lt;/a&gt;
    &lt;br /&gt;
    &lt;caption align=&quot;bottom&quot;&gt;Addresses table&lt;/caption&gt;
&lt;/div&gt;

&lt;div style=&quot;width:100%;text-align:center;margin-bottom:40px&quot;&gt;
    &lt;a target=&quot;_blank&quot; href=&quot;/assets/gt_address_edit.jpg&quot;&gt;&lt;img style=&quot;max-width:350px&quot; src=&quot;/assets/min/gt_address_edit.jpg&quot; alt=&quot;Address edit form&quot; /&gt;&lt;/a&gt;
    &lt;br /&gt;
    &lt;caption align=&quot;bottom&quot;&gt;Address edit form&lt;/caption&gt;
&lt;/div&gt;

&lt;div style=&quot;width:100%;text-align:center;margin-bottom:40px&quot;&gt;
    &lt;a target=&quot;_blank&quot; href=&quot;/assets/gt_login.jpg&quot;&gt;&lt;img style=&quot;max-width:350px&quot; src=&quot;/assets/min/gt_login.jpg&quot; alt=&quot;Admin login form&quot; /&gt;&lt;/a&gt;
    &lt;br /&gt;
    &lt;caption align=&quot;bottom&quot;&gt;Admin login form&lt;/caption&gt;
&lt;/div&gt;

&lt;div style=&quot;width:100%;text-align:center;margin-bottom:40px&quot;&gt;
    &lt;a target=&quot;_blank&quot; href=&quot;/assets/gt_stats.jpg&quot;&gt;&lt;img style=&quot;max-width:350px&quot; src=&quot;/assets/min/gt_stats.jpg&quot; alt=&quot;Statistics&quot; /&gt;&lt;/a&gt;
    &lt;br /&gt;
    &lt;caption align=&quot;bottom&quot;&gt;Statistics&lt;/caption&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 12 Jul 2016 11:11:04 +0200</pubDate>
        <link>http://maicher.github.io/freelance-ruby-or-rails-application-development.html</link>
        <guid isPermaLink="true">http://maicher.github.io/freelance-ruby-or-rails-application-development.html</guid>
        
        <category>ruby</category>
        
        <category>rails</category>
        
        <category>freelance</category>
        
        <category>angular</category>
        
        <category>angularjs</category>
        
        <category>application</category>
        
        <category>web application</category>
        
        <category>software development</category>
        
        
      </item>
    
      <item>
        <title>Verifying database schema in console</title>
        <description>
&lt;p&gt;In Rails we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;schema.rb&lt;/code&gt; file, where we can check, how our database looks like.&lt;/p&gt;

&lt;p&gt;However, logging in to database console can be sometimes useful.&lt;/p&gt;

&lt;p&gt;Here are a list of needed console commands.&lt;/p&gt;

&lt;h3 id=&quot;psql-and-mysql-console-commands&quot;&gt;PSQL and MySQL console commands&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;MySQL&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\list&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;show databases;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;show database list&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\connect DBNAME&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;use DBNAME;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;connec to to database&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\dt&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;show tables;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;show all tables&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\d+ TABLE&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;describe TABLE;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;show table details&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\q&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exit;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;exit from console&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
&lt;/table&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3 id=&quot;how-to-log-into-database-console&quot;&gt;How to log into database console?&lt;/h3&gt;

&lt;p&gt;It depends on the operation system and how the database was installed.&lt;/p&gt;

&lt;p&gt;In general:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;MySQL&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ psql&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ mysql -u root -p&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
&lt;/table&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3 id=&quot;when-checking-console-can-be-helpful&quot;&gt;When checking console can be helpful?&lt;/h3&gt;

&lt;p&gt;Lastly I found myself experimenting in psql console, when I was setting indexes inside psql jsonb fields. I wasn’t sure, if Rails migration modified database schema how I expected, so I wanted to double check it in the console.&lt;/p&gt;

&lt;p&gt;Other examples can be:&lt;/p&gt;

&lt;h4 id=&quot;to-check-differences-between-test-and-development-database&quot;&gt;To check differences between test and development database&lt;/h4&gt;

&lt;h4 id=&quot;to-check-results-of-custom-sql-in-migrations&quot;&gt;To check results of custom SQL in migrations&lt;/h4&gt;

&lt;h4 id=&quot;to-modify-foreign-keys-or-indexes-which-names-are-not-rails-default&quot;&gt;To modify foreign keys or indexes, which names are not Rails default&lt;/h4&gt;
</description>
        <pubDate>Wed, 29 Jun 2016 10:24:10 +0200</pubDate>
        <link>http://maicher.github.io/verifying-database-schema-in-console.html</link>
        <guid isPermaLink="true">http://maicher.github.io/verifying-database-schema-in-console.html</guid>
        
        <category>ruby</category>
        
        <category>rails</category>
        
        <category>migrations</category>
        
        <category>psql</category>
        
        <category>PostgreSQL</category>
        
        <category>MySQL</category>
        
        
      </item>
    
  </channel>
</rss>
